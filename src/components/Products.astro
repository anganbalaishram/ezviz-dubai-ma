---
// src/components/ProductSlider.astro
const products = [
  {
    id: 1,
    name: "BC2",
    image: "/images/wifi-free/BC2.png",
    link: "/categories/wireFree/BC2",
    isNew: true
  },
  {
    id: 2,
    name: "BC1-B1",
    image: "/images/wifi-free/BC1-B1.png",
    link: "/categories/wireFree/BC1-B1",
    isNew: false
  },
  {
    id: 3,
    name: "C3W Color Night Vision",
    image: "/images/outdoor-wifi/C3Wcolor.png",
    link: "/categories/outdoorcamera/c3wcolornight",
    isNew: false
  },
  {
    id: 4,
    name: "LC1C",
    image: "/images/outdoor-wifi/LC1C.png",
    link: "/categories/outdoorcamera/lc1c",
    isNew: false
  },
  {
    id: 5,
    name: "C6W",
    image: "/images/indoor-wifi/C6W.png",
    link: "/categories/indoorcamera/c6w",
    isNew: false
  },
  {
    id: 6,
    name: "C1C-B",
    image: "/images/indoor-wifi/C1C-B.png",
    link: "/categories/indoorcamera/c1c-b",
    isNew: false
  }
];
---

<section class="py-12 bg-gray-50">
  <div class="container mx-auto px-4">
    <h2 class="text-blue-500 text-sm font-medium tracking-wider mb-4">
      <span class="mr-2">O U R</span> P R O D U C T S
    </h2>
    <h1 class="text-4xl font-bold text-gray-800 mb-8">LATEST PRODUCTS</h1>

    <div class="relative">
      <div class="flex items-center">
        <button 
          id="prev-arrow" 
          class="flex-shrink-0 w-12 h-12 bg-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center group hover:bg-blue-50 mr-6 disabled:opacity-40 disabled:cursor-not-allowed disabled:hover:bg-white"
          aria-label="Previous products"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600 group-hover:text-blue-600 transition-colors duration-300" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" />
          </svg>
        </button>

        <div class="flex-1 overflow-hidden">
          <div id="products-slider" class="flex transition-transform duration-500 ease-in-out gap-6">
            {products.map((product) => (
              <div class="flex-none w-full sm:w-1/2 md:w-1/3 lg:w-1/4 relative group">
                {product.isNew && (
                  <div class="absolute top-3 left-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white text-xs font-bold py-1.5 px-3 rounded-full z-10 shadow-lg">
                    New
                  </div>
                )}
                
                <a 
                  class="bg-white rounded-xl shadow-sm hover:shadow-xl transition-all duration-300 overflow-hidden h-full flex flex-col border border-gray-100 cursor-pointer hover:border-blue-200 hover:-translate-y-1 group-hover:bg-gray-50"
                  href={product.link}
                >
                  <div class="h-56 flex items-center justify-center p-6 bg-gradient-to-br from-gray-50 to-white">
                    <img 
                      src={product.image} 
                      alt={product.name} 
                      class="max-h-full max-w-full object-contain transition-transform duration-300 group-hover:scale-105"
                      loading="lazy"
                    />
                  </div>
                  
                  <div class="p-6 text-center flex-1 flex flex-col justify-center">
                    <h3 class="text-sm font-semibold text-gray-800 leading-relaxed group-hover:text-blue-600 transition-colors duration-200">{product.name}</h3>
                    <div class="mt-3 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                      <span class="inline-flex items-center text-blue-600 text-sm font-medium">
                        View Details
                        <svg class="ml-1 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                        </svg>
                      </span>
                    </div>
                  </div>
                </a>
              </div>
            ))}
          </div>
        </div>

        <button 
          id="next-arrow" 
          class="flex-shrink-0 w-12 h-12 bg-white rounded-full shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center group hover:bg-blue-50 ml-6 disabled:opacity-40 disabled:cursor-not-allowed disabled:hover:bg-white"
          aria-label="Next products"
        >
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600 group-hover:text-blue-600 transition-colors duration-300" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </div>

      <div id="slider-dots" class="flex justify-center mt-8 space-x-3">
        <!-- Dots will be dynamically created by JavaScript -->
      </div>
    </div>
  </div>
</section>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const productsSlider = document.getElementById('products-slider');
    const prevArrow = document.getElementById('prev-arrow');
    const nextArrow = document.getElementById('next-arrow');
    const sliderDots = document.getElementById('slider-dots');
    
    if (!productsSlider || !prevArrow || !nextArrow || !sliderDots) return;
    
    let currentIndex = 0;
    const productCards = Array.from(productsSlider.children);
    let dots = [];
    
    // Initialize slider
    createDots();
    updateSlider();
    updateDots();
    
    // Handle arrow navigation
    prevArrow.addEventListener('click', () => {
      if (currentIndex > 0) {
        currentIndex--;
        updateSlider();
        updateDots();
      }
    });
    
    nextArrow.addEventListener('click', () => {
      const maxVisibleSlides = getVisibleSlidesCount();
      if (currentIndex < productCards.length - maxVisibleSlides) {
        currentIndex++;
        updateSlider();
        updateDots();
      }
    });
    
    // Handle dot navigation - always one dot per product
    sliderDots.addEventListener('click', (e) => {
      const dot = e.target.closest('button');
      if (!dot) return;
      
      currentIndex = parseInt(dot.dataset.index);
      updateSlider();
      updateDots();
    });
    
    // Get number of visible slides based on screen width
    function getVisibleSlidesCount() {
      const width = window.innerWidth;
      if (width >= 1024) return 4; // lg: 4 products
      if (width >= 768) return 3;  // md: 3 products
      if (width >= 640) return 2;  // sm: 2 products
      return 1;                   // xs: 1 product
    }
    
    // Update slider position
    function updateSlider() {
      const cardWidth = productCards[0].offsetWidth;
      const gapWidth = 24; // equivalent to Tailwind's gap-6
      const maxVisibleSlides = getVisibleSlidesCount();
      
      // Calculate translation
      const translationValue = currentIndex * (cardWidth + gapWidth);
      productsSlider.style.transform = `translateX(-${translationValue}px)`;
      
      // Update button states
      prevArrow.disabled = currentIndex === 0;
      nextArrow.disabled = currentIndex >= productCards.length - maxVisibleSlides;
    }
    
    // Create dots - always one dot per product (6 dots)
    function createDots() {
      // Clear existing dots
      sliderDots.innerHTML = '';
      dots = [];
      
      // Create new dots (one for each product)
      for (let i = 0; i < productCards.length; i++) {
        const dot = document.createElement('button');
        dot.className = 'relative overflow-hidden rounded-full transition-all duration-300';
        dot.dataset.index = i;
        dot.setAttribute('aria-label', `Go to product ${i + 1}`);
        sliderDots.appendChild(dot);
        dots.push(dot);
      }
    }
    
    // Update dot indicators with professional styling
    function updateDots() {
      const maxVisibleSlides = getVisibleSlidesCount();
      
      dots.forEach((dot, index) => {
        // Remove all classes first
        dot.className = 'relative overflow-hidden rounded-full transition-all duration-300';
        
        // Check if this product is visible in the current view
        const isVisible = index >= currentIndex && index < currentIndex + maxVisibleSlides;
        
        if (isVisible) {
          // Active dot - professional blue bar
          dot.classList.add('w-10', 'h-3', 'bg-gradient-to-r', 'from-blue-500', 'to-blue-600', 'shadow-md');
          // Add animated overlay
          dot.innerHTML = '<div class="absolute inset-0 bg-gradient-to-r from-blue-400 to-blue-500 opacity-50 animate-pulse"></div>';
        } else {
          // Inactive dots - small circles
          dot.classList.add('w-3', 'h-3', 'bg-gray-300', 'hover:bg-gray-400', 'hover:scale-110');
          dot.innerHTML = '';
        }
      });
    }
    
    // Handle window resize
    window.addEventListener('resize', () => {
      const maxVisibleSlides = getVisibleSlidesCount();
      
      // Ensure we don't scroll past the end when resizing
      if (currentIndex > productCards.length - maxVisibleSlides) {
        currentIndex = Math.max(0, productCards.length - maxVisibleSlides);
      }
      
      updateSlider();
      updateDots();
    });
    
    // Touch support for mobile
    let touchStartX = 0;
    let touchEndX = 0;
    
    productsSlider.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    });
    
    productsSlider.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    });
    
    function handleSwipe() {
      const swipeThreshold = 50;
      const maxVisibleSlides = getVisibleSlidesCount();
      
      if (touchEndX < touchStartX - swipeThreshold) {
        // Swipe left (next)
        if (currentIndex < productCards.length - maxVisibleSlides) {
          currentIndex++;
          updateSlider();
          updateDots();
        }
      } else if (touchEndX > touchStartX + swipeThreshold) {
        // Swipe right (previous)
        if (currentIndex > 0) {
          currentIndex--;
          updateSlider();
          updateDots();
        }
      }
    }
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      const maxVisibleSlides = getVisibleSlidesCount();
      
      if (e.key === 'ArrowLeft' && currentIndex > 0) {
        currentIndex--;
        updateSlider();
        updateDots();
      } else if (e.key === 'ArrowRight' && currentIndex < productCards.length - maxVisibleSlides) {
        currentIndex++;
        updateSlider();
        updateDots();
      }
    });
  });
</script>